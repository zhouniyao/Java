#include <stdio.h>
#include <stdlib.h>
#include <jni.h>
#include <com_niming_vrndk03_JniClient.h>

#define CB_CLASS "com/niming/vrndk03/JniClient"

/**
 * OnMessage 回调方法
 */
#define CB_CLASS_MSG_CB "OnMessage"
#define CB_CLASS_MSG_SIG "(Ljava/lang/String;I)V"

/*原型声明*/
int lib_main(int argc, char **argv);//原生库主要子例程
const int getArrayLen(JNIEnv *env, jobjectArray jarray);//用于获得Java数组的长度
void jni_printf(char *format, ...);//向Java层打印字符串消息
static JavaVM *g_VM;//Java虚拟机的全局环境引用，用于回调Java方法
static jclass jNativesCls;//原生Java类JniClient.java的全局引用。

/*
 * Class:     com_niming_vrndk03_JniClient
 * Method:    LibMain
 * Signature: ([Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_niming_vrndk03_JniClient_LibMain
  (JNIEnv *env, jclass class, jobjectArray jargv){
	//从调用这jclass 获得全局引用
	(*env)->GetJavaVM(env, &g_VM);
	//从Java数组提取char **args
	jsize clen = getArrayLen(env, jargv);
	char * args[(int)clen];
	int i;
	jstring jrow;
	for(i=0; i<clen; i++){
		//从Java String[i]获得C 字符串
		jrow = (jstring)(*env)->GetObjectArrayElement(env, jargv, i);
		const char *row = (*env)->GetStringUTFChars(env, jrow, 0);
		args[i] = malloc(strlen(row) + 1);
		strcpy(args[i], row);
		//打印args参数对应的字符串
		jni_printf("Main argv[%d]=%s", i, args[i]);
		//释放Java字符串jrow
		(*env)->ReleaseStringUTFChars(env, jrow, row);
	}
	/*
	 * 加载 JniClient类
	 */
	jNativesCls = (*env)->FindClass(env, CB_CLASS);

	if(jNativesCls == 0){
		jni_printf("Unable to find class: %s", CB_CLASS);
		return -1;
	}
	//调用本地库主要子例程，以从Java层传递的字符串作为程序参数
	lib_main(clen, args);
	return 0;
}

/**
 * 将字符串发送回Java
 */
jmethodID mSendStr;
static void jni_send_str(const char *text, int level){
	JNIEnv *env;
	if(!g_VM){ //*g_VM;//Java虚拟机的全局环境引用
		printf("I_JNI-NOVM: %s\n", text);
		return;
	}
	(*g_VM)->AttachCurrentThread(g_VM, (void **) &env, NULL);
	//如果为空，就加载JniClient类
	if(!jNativesCls){
		jNativesCls = (*env)->FindClass(env, CB_CLASS);
		if(jNativesCls == 0){
			printf("Unable to find class: %s", CB_CLASS);
			return;
		}
	}
	//调用JniClient.OnMessage(String, int)方法
	if(!mSendStr){
		//获得静态方法jni.Natives.OnMessage的引用
		mSendStr = (*env)->GetStaticMethodID(env, jNativesCls
											, CB_CLASS_MSG_CB
											, CB_CLASS_MSG_SIG);


	}
}




//void swap(int *a, int *b){
//    *a += *b;
//    *b = *a - *b;
//    *a = *a - *b;
//}
JNIEXPORT jintArray JNICALL Java_com_niming_vrndk03_JniClient_useArray
(JNIEnv *env, jclass jNativesCls, jintArray arr, jint length){
////    //整形数组操作示例,每个数组元素加上length值后，返回数组
////    int nLength = env->GetArrayLength(arr);
////    int *pArr = env->GetIntArrayElements(arr, 0);
////
////    for(int i=0; i < nLength; i++){
////        *(pArr + i) += length;
////    }
////    env->ReleaseIntArrayElements(arr,pArr,0);
////    return arr;
//
//
//
//    // 选择排序,成功
//    int nLength = env->GetArrayLength(arr);
//    int *pArr = env->GetIntArrayElements(arr, 0);
//
//    for(jint i=0; i<nLength; i++){
//        for(jint j=i+1; j<nLength; j++){
//            if(*(pArr + i) > *(pArr + j)){
//                swap(pArr + i, pArr + j);
//            }
//        }
//    }//End outer for
//    env->ReleaseIntArrayElements(arr,pArr,0);
//    return arr;
}
