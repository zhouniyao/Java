/*

Book:      	Game and Graphics Programming for iOS and Android with OpenGL(R) ES 2.0
Author:    	Romain Marucchi-Foino
ISBN-10: 	1119975913
ISBN-13: 	978-1119975915
Publisher: 	John Wiley & Sons	

Copyright (C) 2011 Romain Marucchi-Foino

This software is provided 'as-is', without any express or implied warranty.
In no event will the authors be held liable for any damages arising from the use of
this software. Permission is granted to anyone who either own or purchase a copy of
the book specified above, to use this software for any purpose, including commercial
applications subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not claim that
you wrote the original software. If you use this software in a product, an acknowledgment
in the product would be appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be misrepresented
as being the original software.

3. This notice may not be removed or altered from any source distribution.

*/

#include "templateApp.h"

/* The main structure of the template. This is a pure C struct, you initialize the structure
   as demonstrated below. Depending on the type of your type of app simply comment / uncomment
   which event callback you want to use. */

/*定义全局变量*/
#define OBJ_FILE (char *)"model.obj"  //The OBJ file name on disk.负责控制在加载时由浏览器加载的文件
#define VERTEX_SHADER (char *)"vertex.glsl" //Your vertex and fragment shader files.
#define FRAGMENT_SHADER (char *)"fragment.glsl"
#define DEBUG_SHADER 1
OBJ *obj = NULL; //从文件中加载复杂几何图形而使用的主结构。
OBJMESH *objmesh = NULL; //Pointer to an mesh inside the OBJ object.
//objmesh变量是指向obj结构中网格的指针，通过该指针，可以访问组成几何图形的所有顶点数据以及为网格使用的每个材质所创建的三角形列表。
PROGRAM *program = NULL; //Shader program structure pointer.


TEMPLATEAPP templateApp = {
							/* Will be called once when the program start. */
							templateAppInit,
							
							/* Will be called every frame. This is the best location to plug your drawing. */
							templateAppDraw,
							templateAppToucheBegan,
							templateAppToucheMoved
						  };
/**
 * 稍后将使用该函数作为供PROGRAM结构使用的回调。如果将其链接到PROGRAM结构，那么
 * 每次调用PROGRAM_draw(另一个辅助函数)时都会自动触发该函数。
 * 同时，在使用glUserProgram绑定着色器之前，该函数允许我们在运行时设置或更新uniform变量
 */
void program_draw_callback(void *ptr){
	/*Convert the void * in the parameter to a valid PROGRAM pointer.*/
	PROGRAM * curr_program = (PROGRAM *)ptr;
	unsigned int i = 0; // Loop counter
	/*Loop while there are some uniform variables*/
	while(i != curr_program->uniform_count){
		/*
		 * Check if the current uniform is the MODELVIEWPROJECTIONMATRIX.
		 * If yes,enter the condition clause to update the matrix data.
		 */
		if(!strcmp(curr_program->uniform_array[i].name),
				"MODELVIEWPROJECTIONMATRIX"){
			glUniformMatrix4fv(//Update the matrix.
					curr_program->uniform_array[i].location, //The uniform location.
					1, //Number of matrix.
					GL_FALSE, //Don't transpose the matrix.
					/*
					 * The result of the current projection matrix multiplied by the model view matrix.
					 */
					(float *)GFX_get_modelview_projection_matrix()
			);
		}//End if
		++i; //Next uniform please……
	}
}

void templateAppInit( int width, int height )
{
	// Setup the exit callback function.
	atexit( templateAppExit );
	
	// Initialize GLES.
	GFX_start();
	
	// Setup a GLES viewport using the current width and height of the screen.
	glViewport( 0, 0, width, height );
	
	/* Insert your initialization code here */
	GFX_set_matrix_mode(PROJECTION_MATRIX);
	GFX_load_identity();
	GFX_set_perspective(
			45.0f,
			(float)width / (float)height,
			0.1f,
			100.0f,
			0.0f
	);

	/**/
	program = PROGRAM_create(
			(char *)"default",
			VERTEX_SHADER,
			FRAGMENT_SHADER,
			1,
			DEBUG_SHADER,
			NULL,
			program_draw_callback
	);

	/*加载obj*/
	obj = OBJ_load(OBJ_FILE, 1);
}


void templateAppDraw( void )
{
	// Clear the depth, stencil and colorbuffer.
	glClear( GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT | GL_COLOR_BUFFER_BIT );

	/* Insert your drawing code here */

}


void templateAppToucheBegan( float x, float y, unsigned int tap_count )
{
	/* Insert code to execute when a new touche is detected on screen. */
}

void templateAppToucheMoved( float x, float y, unsigned int tap_count )
{
	/* Insert code to execute when a touche move on screen. */
}

void templateAppExit( void )
{
	/* Code to run when the application exit, perfect location to free everything. */
}
