#include <stdio.h>
#include <stdlib.h>
#include <jni.h>
#include <com_niming_vrndk03_JniClient.h>

#define CB_CLASS "jni/Natives"

/**
 * OnMessage 回调方法
 */
#define CB_CLASS_MSG_CB "OnMessage"
#define CB_CLASS_MSG_SIG "(Ljava/lang/String;I)V"

/*原型声明*/
int lib_main(int argc, char **argv);//原生库主要子例程
const int getArrayLen(JNIEnv *env, jobjectArray jarray);//用于获得Java数组的长度
void jni_printf(char *format, ...);//向Java层打印字符串消息
static JavaVM *g_VM;//Java虚拟机的全局环境引用，用于回调Java方法
static jclass jNativesCls;//原生Java类JniClient.java的全局引用。

/*
 * Class:     com_niming_vrndk03_JniClient
 * Method:    LibMain
 * Signature: ([Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_niming_vrndk03_JniClient_LibMain
  (JNIEnv *, jclass, jobjectArray);
//void swap(int *a, int *b){
//    *a += *b;
//    *b = *a - *b;
//    *a = *a - *b;
//}
JNIEXPORT jintArray JNICALL Java_com_niming_vrndk03_JniClient_useArray
(JNIEnv *env, jclass jNativesCls, jintArray arr, jint length){
////    //整形数组操作示例,每个数组元素加上length值后，返回数组
////    int nLength = env->GetArrayLength(arr);
////    int *pArr = env->GetIntArrayElements(arr, 0);
////
////    for(int i=0; i < nLength; i++){
////        *(pArr + i) += length;
////    }
////    env->ReleaseIntArrayElements(arr,pArr,0);
////    return arr;
//
//
//
//    // 选择排序,成功
//    int nLength = env->GetArrayLength(arr);
//    int *pArr = env->GetIntArrayElements(arr, 0);
//
//    for(jint i=0; i<nLength; i++){
//        for(jint j=i+1; j<nLength; j++){
//            if(*(pArr + i) > *(pArr + j)){
//                swap(pArr + i, pArr + j);
//            }
//        }
//    }//End outer for
//    env->ReleaseIntArrayElements(arr,pArr,0);
//    return arr;
}
